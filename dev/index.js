var Vector3 = /** @class */function () {
  function Vector3(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  /**
   * @description: 获取向量的长度，即向量的模长
   * @return {number} 向量的模长
   */
  Vector3.prototype.length = function () {
    // return vector length
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  };
  /**
   * @description: 向量归一化
   */
  Vector3.prototype.normalize = function () {
    var vecMag = Math.sqrt(this.length());
    if (vecMag != 0) {
      var scaler = 1 / vecMag;
      this.x *= scaler;
      this.y *= scaler;
      this.z *= scaler;
    }
  };
  Vector3.prototype.zero = function () {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  };
  return Vector3;
}();
var Vector = /** @class */function () {
  function Vector() {}
  Vector.add = function (out, v1, v2) {
    out.x = v1.x + v2.x;
    out.y = v1.y + v2.y;
    if (out instanceof Vector3 && v1 instanceof Vector3 && v2 instanceof Vector3) {
      out.z = v1.z + v2.z;
    }
  };
  Vector.substract = function (out, v1, v2) {
    out.x = v1.x - v2.x;
    out.y = v1.y - v2.y;
    if (out instanceof Vector3 && v1 instanceof Vector3 && v2 instanceof Vector3) {
      out.z = v1.z - v2.z;
    }
  };
  Vector.multiplyScalar = function (out, v, scalar) {
    out.x = v.x * scalar;
    out.y = v.y * scalar;
    if (out instanceof Vector3 && v instanceof Vector3) {
      out.z = v.z * scalar;
    }
  };
  Vector.equals = function (v1, v2) {
    if (v1 instanceof Vector3 && v2 instanceof Vector3) {
      return v1.x == v2.x && v1.y == v2.y && v1.z == v2.z;
    } else {
      return v1.x == v2.x && v1.y == v2.y;
    }
  };
  Vector.dot = function (out, v1, v2) {};
  return Vector;
}();
var Vector2 = /** @class */function () {
  function Vector2(x, y) {
    this.x = x;
    this.y = y;
  }
  /**
   * @description: 获取向量的长度，即向量的模长
   * @return {number} 向量的模长
   */
  Vector2.prototype.length = function () {
    // return vector length
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };
  /**
   * @description: 向量归一化
   */
  Vector2.prototype.normalize = function () {
    var vecMag = Math.sqrt(this.length());
    if (vecMag != 0) {
      var scaler = 1 / vecMag;
      this.x *= scaler;
      this.y *= scaler;
    }
  };
  Vector2.prototype.zero = function () {
    this.x = 0;
    this.y = 0;
  };
  return Vector2;
}();
export { Vector, Vector2, Vector3 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
